library(stringr)
library(data.table)
#Get Train Set Ready **********
Boat <- read.csv("train.csv")
Boat3 <- Boat
Boat3$Embarked[Boat3$Embarked == ""] <- "C"
Boat3$Ticket <- NULL
Boat3$lastName <- NULL
TrainID <- Boat3$PassengerId
Boat3$Name <- NULL
Boat3$PassengerId <- NULL
Boat3$Age[is.na(Boat3$Age)] <- median(Boat3$Age, na.rm = TRUE)
#Deck and Cabin Imputation
Boat3$Cabin <- NULL
Boat3$Survived <- as.factor(Boat3$Survived)
#Save Set for Demimished model
#RandomForest******************
library(randomForest)
set.seed(42)
#Good*********
RF <- randomForest(Survived ~.,
Boat3,
mtyr = 10,
ntree = 10000)
RF
vote_RF <- RF$votes
x <- vote_RF[, 2]
x2 <- as.data.frame(x)
x2 <- unlist(x2)
Boat3$Pred <- as.numeric(x2)
noise <- rbinom(891,10,0.1)
noise2 <- rbinom(891,10,0.1)
noise3 <- rbinom(891,10000,0.1)
Boat4$noise <- noise
Boat4$noise2 <- noise2
Boat4$noise3 <- noise3
Boat4$Sex <- NULL
Boat4$Pclass <- NULL
View(Boat3)
Boat <- read.csv("train.csv")
Boat3 <- Boat
#Feature Engineering ****************
#Other variable cleaning and imputing
Boat3$Embarked[Boat3$Embarked == ""] <- "C"
Boat3$Ticket <- NULL
Boat3$lastName <- NULL
TrainID <- Boat3$PassengerId
Boat3$Name <- NULL
Boat3$PassengerId <- NULL
Boat3$Age[is.na(Boat3$Age)] <- median(Boat3$Age, na.rm = TRUE)
#Deck and Cabin Imputation
Boat3$Cabin <- NULL
Boat3$Survived <- as.factor(Boat3$Survived)
Boat4 <- Boat3
#Save Set for Demimished model
RF <- randomForest(Survived ~.,
Boat3,
mtyr = 10,
ntree = 10000)
RF
vote_RF <- RF$votes
x <- vote_RF[, 2]
x2 <- as.data.frame(x)
x2 <- unlist(x2)
Boat3$Pred <- as.numeric(x2)
noise <- rbinom(891,10,0.1)
noise2 <- rbinom(891,10,0.1)
noise3 <- rbinom(891,10000,0.1)
Boat4$noise <- noise
Boat4$noise2 <- noise2
Boat4$noise3 <- noise3
Boat4$Sex <- NULL
Boat4$Pclass <- NULL
RF_Bad <- randomForest(Survived ~.,
Boat4,
mtyr = 10,
ntree = 1000)
RF_Bad
vote_RF_Bad <- RF_Bad$votes
y <- vote_RF_Bad[, 2]
y2 <- as.data.frame(y)
y2 <- unlist(y2)
Boat4$Pred <- as.numeric(y2)
library(Metrics)
#library(MLMetrics)
LL1 <- Boat3[, c(1, 9)]
#Deal with Infinity situation
LL1$Pred[LL1$Pred == 0 & LL1$Survived == 1] <- 0.0000000001
LL2 <- Boat4[, c(1, 10)]
LL1$Survived <- as.numeric(LL1$Survived)
LL2$Survived <- as.numeric(LL2$Survived)
LL1$Survived2 = LL1$Survived - 1
LL2$Survived2 = LL2$Survived - 1
LogLoss_Best <- ll(LL1$Survived2, LL1$Pred)
LL1$LogLoss <- LogLoss_Best
LL2 <- as.data.frame(LL2)
LogLoss_Worst <- ll(LL2$Survived2, LL2$Pred)
#Check the means of each log loss
mean(LogLoss_Best)
mean(LogLoss_Worst)
sd(LogLoss_Best)
sd(LogLoss_Worst)
median(LogLoss_Best)
median(LogLoss_Worst)
max(LogLoss_Best)
max(LogLoss_Worst)
hist(LogLoss_Best,  breaks=20, xlim = c(0,10))
hist(LogLoss_Worst,  breaks=20, xlim = c(0, 10))
colors = c("red", "blue")
ggplot(LL1, aes(x = Pred, fill = Survived)) +
geom_histogram(col = colors)
library(ggplot2)
ggplot(LL1, aes(x = Pred, fill = Survived)) +
geom_histogram(col = colors)
LL1$Color[LL1$Survived2 == 0] <- "gray"
LL1$Color[LL1$Survived2 == 1] <- "blue"
ggplot(LL1, aes(x = Pred, fill = Survived)) +
geom_histogram(col = Color)
ggplot(LL1, aes(x = Pred, fill = Survived)) +
geom_histogram(col = LL1$Color)
ggplot(LL1, aes(x = Pred, fill = Survived)) +
geom_histogram()
ggplot(LL1, aes(x = Pred, fill = Survived)) +
geom_histogram(y = density)
ggplot(LL1, aes(x = Pred, fill = Survived)) +
geom_density()
ggplot(LL1, aes(x = Pred, fill = Survived2)) +
geom_density()
ggplot(LL1, aes(x = Pred, fill = Survived2)) +
geom_histogram()
ggplot(LL1, aes(x = Pred, fill = Survived2)) +
geom_bar()
ggplot(LL1, aes(x = Pred, fill = Survived2)) +
geom_histogram(colour = 'white')
ggplot(LL1, aes(x = Pred, fill = Survived2)) +
geom_histogram(colour = 'white', position = 'fill')
ggplot(LL1, aes(x = Pred, color = Survived2)) +
geom_histogram(colour = 'white')
ggplot(LL1, aes(x = Pred, color = Survived2)) +
geom_histogram()
ggplot(aes(x=Pred, color=Survived2), data=LL1) + stat_bin(binwidth=5)
ggplot(aes(x=Pred, color=Survived2), data=LL1) + geom_histogram()
ggplot(aes(x=Pred, colour=Survived2), data=LL1) + geom_histogram()
ggplot(aes(x=Pred, fill=Survived2), data=LL1) + geom_histogram()
colors <- NULL
colors <- rm
rm(colors)
ggplot(LL1, aes(x = Pred, color = Survived2)) +
geom_histogram()
ggplot(LL1, aes(x = Pred, fill = Survived2)) +
geom_histogram()
ggplot(aes(x=Pred, fill=Survived2), data=LL1) + geom_histogram()
ggplot(aes(x=Pred, fill=Survived), data=LL1) + geom_histogram()
ggplot(aes(x=Pred, fill=Color), data=LL1) + geom_histogram()
ggplot(aes(x=Pred, fill=Survived), data=LL1) + geom_histogram()
LL1$Color[LL1$Survived2 == 0] <- "No"
LL1$Color[LL1$Survived2 == 1] <- "Yes"
ggplot(aes(x=Pred, fill=Color), data=LL1) + geom_histogram()
ggplot(aes(x=Pred, fill=Color), data=LL1) +
geom_histogram() +
scale_fill_manual = c("red", "gray")
ggplot(aes(x=Pred, fill=Color), data=LL1) +
geom_histogram()
ggplot(aes(x=Pred, fill=Color), data=LL1) +
geom_histogram() +
scale_fill_manual = c("red", "gray")
ggplot(aes(x=Pred, fill=Color), data=LL1) +
geom_histogram() +
scale_fill_manual(values = c("gray","blue"))
ggplot(aes(x=Pred, fill=Color), data=LL1) +
geom_histogram() +
scale_fill_manual(values = c("dark gray","dark blue"))
ggplot(aes(x=Pred, fill=Color), data=LL1) +
geom_histogram(colours = black) +
scale_fill_manual(values = c("dark gray","dark blue"))
ggplot(aes(x=Pred, fill=Color), data=LL1) +
geom_histogram(colours = black) +
scale_fill_manual(values = c("dark gray","dark blue"))
knitr::opts_chunk$set(echo = TRUE)
directory <- "/Users/emily.webber/Documents/R/LogLoss"
setwd(directory)
library(dplyr)
library(stringr)
library(data.table)
#Get Train Set Ready **********
Boat <- read.csv("train.csv")
Boat3 <- Boat
#Feature Engineering ****************
#Other variable cleaning and imputing
Boat3$Embarked[Boat3$Embarked == ""] <- "C"
Boat3$Ticket <- NULL
Boat3$lastName <- NULL
TrainID <- Boat3$PassengerId
Boat3$Name <- NULL
Boat3$PassengerId <- NULL
Boat3$Age[is.na(Boat3$Age)] <- median(Boat3$Age, na.rm = TRUE)
#Deck and Cabin Imputation
Boat3$Cabin <- NULL
Boat3$Survived <- as.factor(Boat3$Survived)
Boat4 <- Boat3
#Save Set for Demimished model
#RandomForest******************
library(randomForest)
set.seed(42)
#Good*********
RF <- randomForest(Survived ~.,
Boat3,
mtyr = 10,
ntree = 10000)
RF
vote_RF <- RF$votes
x <- vote_RF[, 2]
x2 <- as.data.frame(x)
x2 <- unlist(x2)
Boat3$Pred <- as.numeric(x2)
#Not Good******
#Dropped Columns + Noise
noise <- rbinom(891,10,0.1)
noise2 <- rbinom(891,10,0.1)
noise3 <- rbinom(891,10000,0.1)
Boat4$noise <- noise
Boat4$noise2 <- noise2
Boat4$noise3 <- noise3
Boat4$Sex <- NULL
Boat4$Pclass <- NULL
RF_Bad <- randomForest(Survived ~.,
Boat4,
mtyr = 10,
ntree = 1000)
RF_Bad
vote_RF_Bad <- RF_Bad$votes
y <- vote_RF_Bad[, 2]
y2 <- as.data.frame(y)
y2 <- unlist(y2)
Boat4$Pred <- as.numeric(y2)
#LogLoss***************************
library(Metrics)
#library(MLMetrics)
LL1 <- Boat3[, c(1, 9)]
#Deal with Infinity situation
LL1$Pred[LL1$Pred == 0 & LL1$Survived == 1] <- 0.0000000001
LL2 <- Boat4[, c(1, 10)]
LL1$Survived <- as.numeric(LL1$Survived)
LL2$Survived <- as.numeric(LL2$Survived)
LL1$Survived2 = LL1$Survived - 1
LL2$Survived2 = LL2$Survived - 1
LogLoss_Best <- ll(LL1$Survived2, LL1$Pred)
LL1$LogLoss <- LogLoss_Best
LL2 <- as.data.frame(LL2)
LogLoss_Worst <- ll(LL2$Survived2, LL2$Pred)
#Check the means of each log loss
mean(LogLoss_Best)
mean(LogLoss_Worst)
sd(LogLoss_Best)
sd(LogLoss_Worst)
median(LogLoss_Best)
median(LogLoss_Worst)
max(LogLoss_Best)
max(LogLoss_Worst)
[![](/Users/emily.webber/Documents/R/LogLoss/LogLoss.png)]
![](/Users/emily.webber/Documents/R/LogLoss/LogLoss.png)
!(/Users/emily.webber/Documents/R/LogLoss/LogLoss.png)
/Users/emily.webber/Documents/R/LogLoss/LogLoss.png
install.packages("gridExtra")
LL2$Survive[LL2$Survived2 == 0] <- "No"
LL2$Survive[LL2$Survived2 == 1] <- "Yes"
LL2P <- ggplot(aes(x=Pred, fill=Survive), data=LL2, stat_bin(25)) +
geom_histogram() +
scale_fill_manual(values = c("dark gray","dark blue")) +
ggtitle("Poor Model")  +
ylab("Count") +
xlab('LogLoss')
LL2P
grid.arrange(LL1P, LL2P, ncol = 2)
library(gridExtra)
grid.arrange(LL1P, LL2P, ncol = 2)
LL1$Survive[LL1$Survived2 == 0] <- "No"
LL1$Survive[LL1$Survived2 == 1] <- "Yes"
LL1P <- ggplot(aes(x=Pred, fill=Survive, data=LL1, stat_bin(25)) +
geom_histogram() +
scale_fill_manual(values = c("dark gray","dark blue")) +
ggtitle("Good Model")  +
ylab("Count") +
xlab('LogLoss')
LL2$Survive[LL2$Survived2 == 0] <- "No"
LL2$Survive[LL2$Survived2 == 1] <- "Yes"
LL2P <- ggplot(aes(x=Pred, fill=Survive), data=LL2, stat_bin(25)) +
geom_histogram() +
scale_fill_manual(values = c("dark gray","dark blue")) +
ggtitle("Poor Model")  +
ylab("Count") +
xlab('LogLoss')
LL1P <- ggplot(aes(x=Pred, fill=Survive, data=LL1, stat_bin(25)) +
geom_histogram() +
scale_fill_manual(values = c("dark gray","dark blue")) +
ggtitle("Good Model")  +
ylab("Count") +
xlab('LogLoss'))
View(RF)
View(LL2)
View(LL2P)
View(LL2)
LL1Mean <- mean(LL1$LogLoss)
LL1SD <- sd(LL2$LogLoss)
LL2Mean <- mean(LL2$LogLoss)
LL2SD <- sd(LL2$LogLoss)
MSD <- c(LL1Mean, LL2Mean)
table(MSD)
LL2$LogLoss <- LogLoss_Worst
LL1$LogLoss <- LogLoss_Best
LL1Mean <- mean(LL1$LogLoss)
LL1SD <- sd(LL2$LogLoss)
LL2Mean <- mean(LL2$LogLoss)
LL2SD <- sd(LL2$LogLoss)
MSD <- c(LL1Mean, LL2Mean)
table(MSD)
MSD2 <- as.data.frame(MSD)
View(MSD2)
MSD2 <- as.data.frame(MSD)
MSD2$Model <- c('good', 'poor')
View(MSD2)
MSD2 <- as.data.frame(MSD)
LL1Mean <- mean(LL1$LogLoss)
LL1SD <- sd(LL2$LogLoss)
LL2Mean <- mean(LL2$LogLoss)
LL2SD <- sd(LL2$LogLoss)
LL1Med <- median(LL1$LogLoss)
LL2Med <- median(LL2$LogLoss)
MSD <- c(LL1Mean, LL2Mean)
MSD2 <- as.data.frame(MSD)
MSD2$Model <- c('good', 'poor')
SSD <- c(LL1SD, LL2SD)
SSD2 <- as.data.frame(SSD)
SSD2$Model <- c('good', 'poor')
Med <- c(LL1Med, LL2Med)
Med2 <- as.data.frame(Med)
Med2$Model <- c('good', 'poor')
MSD2$SD <- SSD2$SSD
MSD2$Median <- Med2[, 1]
MSD3 <- MSD2[c(2,1,3,4)]
View(MSD3)
View(SSD2)
#render your sweet site.
rmarkdown::render_site()
setwd("/Users/emily.webber/Dropbox/Website Dropbox 2/LogLoss")
#render your sweet site.
rmarkdown::render_site()
directory <- "/Users/emily.webber/Dropbox/Website Dropbox 2/LogLoss"
setwd(directory)
library(data.table)
library(knitr)
library(dplyr)
library(stringr)
library(data.table)
library(ggplot2)
library(gridExtra)
#Get Train Set Ready **********
Boat <- read.csv("train.csv")
Boat3 <- Boat
#Feature Engineering ****************
#Other variable cleaning and imputing
Boat3$Embarked[Boat3$Embarked == ""] <- "C"
Boat3$Ticket <- NULL
Boat3$lastName <- NULL
TrainID <- Boat3$PassengerId
Boat3$Name <- NULL
Boat3$PassengerId <- NULL
Boat3$Age[is.na(Boat3$Age)] <- median(Boat3$Age, na.rm = TRUE)
#Deck and Cabin Imputation
Boat3$Cabin <- NULL
Boat3$Survived <- as.factor(Boat3$Survived)
Boat4 <- Boat3
#Save Set for Demimished model
#RandomForest******************
library(randomForest)
set.seed(42)
#Good*********
RF <- randomForest(Survived ~.,
Boat3,
mtyr = 10,
ntree = 10000)
RF
vote_RF <- RF$votes
x <- vote_RF[, 2]
x2 <- as.data.frame(x)
x2 <- unlist(x2)
Boat3$Pred <- as.numeric(x2)
#Not Good******
#Dropped Columns + Noise
noise <- rbinom(891,10,0.1)
noise2 <- rbinom(891,10,0.1)
noise3 <- rbinom(891,10000,0.1)
Boat4$noise <- noise
Boat4$noise2 <- noise2
Boat4$noise3 <- noise3
Boat4$Sex <- NULL
Boat4$Pclass <- NULL
RF_Bad <- randomForest(Survived ~.,
Boat4,
mtyr = 10,
ntree = 1000)
RF_Bad
vote_RF_Bad <- RF_Bad$votes
y <- vote_RF_Bad[, 2]
y2 <- as.data.frame(y)
y2 <- unlist(y2)
Boat4$Pred <- as.numeric(y2)
#LogLoss***************************
library(Metrics)
#library(MLMetrics)
LL1 <- Boat3[, c(1, 9)]
#Deal with Infinity situation
LL1$Pred[LL1$Pred == 0 & LL1$Survived == 1] <- 0.0000000001
LL2 <- Boat4[, c(1, 10)]
LL1$Survived <- as.numeric(LL1$Survived)
LL2$Survived <- as.numeric(LL2$Survived)
LL1$Survived2 = LL1$Survived - 1
LL2$Survived2 = LL2$Survived - 1
LogLoss_Best <- ll(LL1$Survived2, LL1$Pred)
LL1$LogLoss <- LogLoss_Best
LL2 <- as.data.frame(LL2)
LogLoss_Worst <- ll(LL2$Survived2, LL2$Pred)
#Check the means of each log loss
mean(LogLoss_Best)
mean(LogLoss_Worst)
sd(LogLoss_Best)
sd(LogLoss_Worst)
median(LogLoss_Best)
median(LogLoss_Worst)
max(LogLoss_Best)
max(LogLoss_Worst)
LL1$Survive[LL1$Survived2 == 0] <- "No"
LL1$Survive[LL1$Survived2 == 1] <- "Yes"
LL1P <- ggplot(aes(x=Pred, fill=Survive), data=LL1, stat_bin(25)) +
geom_histogram(bins = 25) +
scale_fill_manual(values = c("dark gray","dark blue")) +
ggtitle("Good Model")  +
ylab("Count") +
xlab('Pred Probabilities') + theme(legend.position="top")
LL2$Survive[LL2$Survived2 == 0] <- 'No'
LL2$Survive[LL2$Survived2 == 1] <- "Yes"
LL2P <- ggplot(aes(x=Pred, fill=Survive), data=LL2, stat_bin(25)) +
geom_histogram(bins = 25) +
scale_fill_manual(values = c("dark gray","dark blue")) +
ggtitle("Poor Model")  +
ylab("Count") +
xlab('Pred Probabilities')+ theme(legend.position="top")
LL1$Survive[LL1$Survived2 == 0] <- "No"
LL1$Survive[LL1$Survived2 == 1] <- "Yes"
LL1$LogLoss <- LogLoss_Best
LL1P <- ggplot(aes(x=LogLoss, fill=Survive), data=LL1, stat_bin(25)) +
geom_histogram(bins = 25) +
scale_fill_manual(values = c("dark gray","dark blue")) +
ggtitle("Good Model")  +
ylab("Count") +
xlab('LogLoss') + theme(legend.position="top")
LL2$Survive[LL2$Survived2 == 0] <- 'No'
LL2$Survive[LL2$Survived2 == 1] <- "Yes"
LL2$LogLoss <- LogLoss_Worst
LL2P <- ggplot(aes(x=LogLoss, fill=Survive), data=LL2, stat_bin(25)) +
geom_histogram(bins = 25) +
scale_fill_manual(values = c("dark gray","dark blue")) +
ggtitle("Poor Model")  +
ylab("Count") +
xlab('LogLoss')+ theme(legend.position="top")
LL1Mean <- mean(LL1$LogLoss)
LL1SD <- sd(LL1$LogLoss)
LL2Mean <- mean(LL2$LogLoss)
LL2SD <- sd(LL2$LogLoss)
LL1Med <- median(LL1$LogLoss)
LL2Med <- median(LL2$LogLoss)
MSD <- c(LL1Mean, LL2Mean)
MSD2 <- as.data.frame(MSD)
MSD2$Model <- c('Good', 'Poor')
SSD <- c(LL1SD, LL2SD)
SSD2 <- as.data.frame(SSD)
SSD2$Model <- c('Good', 'Poor')
Med <- c(LL1Med, LL2Med)
Med2 <- as.data.frame(Med)
Med2$Model <- c('Good', 'Poor')
MSD2$SD <- SSD2$SSD
MSD2$Median <- Med2[, 1]
MSD3 <- MSD2[c(2,1,3,4)]
colnames(MSD3)[colnames(MSD3)=="MSD"] <- "Mean"
kable(MSD3)
x <- setDT(LL1)[, lapply(.SD, mean), by=.(Survive),
.SDcols=c("LogLoss")]
y <- setDT(LL2)[, lapply(.SD, mean), by=.(Survive),
.SDcols=c("LogLoss")]
View(vote_RF_Bad)
View(x)
View(y)
View(x)
View(x)
View(x)
x <- setDT(LL1)[, lapply(.SD, median), by=.(Survive),
.SDcols=c("LogLoss")]
y <- setDT(LL2)[, lapply(.SD, median), by=.(Survive),
.SDcols=c("LogLoss")]
colnames(x)[colnames(x)=="LogLoss"] <- "Good_LogLoss"
colnames(y)[colnames(y)=="LogLoss"] <- "Poor_LogLoss"
View(x)
View(y)
x$Poor_LogLoss <- y$Poor_LogLoss
View(x)
x$Difference_LogLoss <- (x$Good_LogLoss - x$Poor_LogLoss)**2
View(x)
x$Difference_LogLoss <- (x$Good_LogLoss - x$Poor_LogLoss)/ (x$Good_LogLoss + x$Poor_LogLoss)
x$Difference_LogLoss <- abs(x$Good_LogLoss - x$Poor_LogLoss)/
(x$Good_LogLoss + x$Poor_LogLoss)
x$Perc_Diff_LogLoss <- abs(x$Good_LogLoss - x$Poor_LogLoss)/
(x$Good_LogLoss + x$Poor_LogLoss)
